import { VerticalBox, HorizontalBox } from "std-widgets.slint";

export component ChartView inherits Rectangle {
    in property <image> chart-image;
    in property <string> symbol: "N/A";
    in property <bool> show-crosshair: false;
    in property <length> crosshair-x: 0px;
    in property <length> crosshair-y: 0px;
    
    callback pan(length, length);
    callback zoom(float, length, length);
    callback mouse-move(length, length);
    callback mouse-leave();
    callback reset-zoom();
    
    background: #1a1a1a;
    
    // Chart display
    chart-container := Rectangle {
        width: 100%;
        height: 100%;
        
        if chart-image.width > 0 && chart-image.height > 0 : Image {
            source: chart-image;
            image-fit: fill;
            width: 100%;
            height: 100%;
        }
        
        // Touch area for interactions
        touch := TouchArea {
            width: 100%;
            height: 100%;
            
            pointer-event(event) => {
                if (event.kind == PointerEventKind.down) {
                    if (event.button == PointerEventButton.left) {
                        // Start panning
                    } else if (event.button == PointerEventButton.middle) {
                        // Reset zoom on middle click
                        reset-zoom();
                    }
                } else if (event.kind == PointerEventKind.up) {
                    // End panning
                }
            }
            
            moved => {
                if (self.pressed) {
                    // Calculate pan delta
                    pan(self.mouse-x - self.pressed-x, self.mouse-y - self.pressed-y);
                } else {
                    // Update crosshair position
                    mouse-move(self.mouse-x, self.mouse-y);
                }
            }
            
            scroll-event(event) => {
                // Handle zoom
                if (event.delta-y != 0) {
                    // Positive delta = zoom in, negative = zoom out
                    if (event.delta-y > 0) {
                        zoom(1.1, self.mouse-x, self.mouse-y);
                    } else {
                        zoom(0.9, self.mouse-x, self.mouse-y);
                    }
                }
                return accept;
            }
        }
        
        // Crosshair overlay
        if show-crosshair : Rectangle {
            // Vertical line
            Rectangle {
                x: crosshair-x - 0.5px;
                y: 0;
                width: 1px;
                height: parent.height;
                background: #ffffff66;
            }
            
            // Horizontal line
            Rectangle {
                x: 0;
                y: crosshair-y - 0.5px;
                width: parent.width;
                height: 1px;
                background: #ffffff66;
            }
        }
    }
    
    // Chart info overlay
    info-overlay := Rectangle {
        x: 10px;
        y: 10px;
        background: #000000cc;
        border-radius: 4px;
        padding: 8px;
        
        HorizontalBox {
            spacing: 10px;
            
            Text {
                text: symbol;
                color: white;
                font-size: 14px;
                font-weight: 700;
            }
        }
    }
}